
ADS8688-STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002334  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002440  08002440  00003440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002464  08002464  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002464  08002464  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002464  08002464  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002464  08002464  00003464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002468  08002468  00003468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800246c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08002478  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002478  0000408c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c8f  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ae  00000000  00000000  00009cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004fb  00000000  00000000  0000ba40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e28  00000000  00000000  0000bf3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000815d  00000000  00000000  00022d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081c34  00000000  00000000  0002aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000acaf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019f4  00000000  00000000  000acb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ae52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002428 	.word	0x08002428

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002428 	.word	0x08002428

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <ADS8688_Init>:
 * @brief 简化的初始化流程 (参考开源代码)
 * @param hadc ADS8688 句柄
 * @retval HAL_StatusTypeDef 状态
 */
HAL_StatusTypeDef ADS8688_Init(ADS8688_Handle_t *hadc)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    uint8_t ads_data[2] = {0};
 8000610:	2300      	movs	r3, #0
 8000612:	813b      	strh	r3, [r7, #8]
    
    if (hadc == NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <ADS8688_Init+0x16>
        return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e06d      	b.n	80006fa <ADS8688_Init+0xf2>
    }
    
    // 设置默认超时时间
    hadc->timeout = ADS8688_TIMEOUT_MS;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2264      	movs	r2, #100	@ 0x64
 8000622:	605a      	str	r2, [r3, #4]
    
    // 初始化 CS 和 RST 引脚
    ADS8688_SetCS(true);    // CS 高电平，不选中
 8000624:	2001      	movs	r0, #1
 8000626:	f000 fabb 	bl	8000ba0 <ADS8688_SetCS>
    ADS8688_SetRST(true);   // RST 高电平，正常工作
 800062a:	2001      	movs	r0, #1
 800062c:	f000 faca 	bl	8000bc4 <ADS8688_SetRST>
    
    // 等待设备上电稳定
    ADS8688_Delay(ADS8688_POWERUP_TIME_MS);
 8000630:	200f      	movs	r0, #15
 8000632:	f000 fad9 	bl	8000be8 <ADS8688_Delay>
    
    // 软件复位 (参考开源代码)
    status = ADS8688_SendCommand(hadc, 0x85);  // RST命令
 8000636:	2185      	movs	r1, #133	@ 0x85
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 fa79 	bl	8000b30 <ADS8688_SendCommand>
 800063e:	4603      	mov	r3, r0
 8000640:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) {
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <ADS8688_Init+0x44>
        return status;
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	e056      	b.n	80006fa <ADS8688_Init+0xf2>
    }
    ADS8688_Delay(100);
 800064c:	2064      	movs	r0, #100	@ 0x64
 800064e:	f000 facb 	bl	8000be8 <ADS8688_Delay>
    
    // 发送CONT命令进入空闲模式
    status = ADS8688_SendCommand(hadc, 0x01);  // CONT命令
 8000652:	2101      	movs	r1, #1
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 fa6b 	bl	8000b30 <ADS8688_SendCommand>
 800065a:	4603      	mov	r3, r0
 800065c:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) {
 800065e:	7afb      	ldrb	r3, [r7, #11]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <ADS8688_Init+0x60>
        return status;
 8000664:	7afb      	ldrb	r3, [r7, #11]
 8000666:	e048      	b.n	80006fa <ADS8688_Init+0xf2>
    }
    ADS8688_Delay(10);
 8000668:	200a      	movs	r0, #10
 800066a:	f000 fabd 	bl	8000be8 <ADS8688_Delay>
    
    // 使能自动扫描所有通道
    status = ADS8688_WriteRegister(hadc, ADS8688_REG_AUTO_SEQ_EN, 0xFF);
 800066e:	22ff      	movs	r2, #255	@ 0xff
 8000670:	2101      	movs	r1, #1
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f845 	bl	8000702 <ADS8688_WriteRegister>
 8000678:	4603      	mov	r3, r0
 800067a:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) {
 800067c:	7afb      	ldrb	r3, [r7, #11]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <ADS8688_Init+0x7e>
        return status;
 8000682:	7afb      	ldrb	r3, [r7, #11]
 8000684:	e039      	b.n	80006fa <ADS8688_Init+0xf2>
    }
    ADS8688_Delay(10);
 8000686:	200a      	movs	r0, #10
 8000688:	f000 faae 	bl	8000be8 <ADS8688_Delay>
    
    // 设置特征选择 (设备ID=0, 报警禁用, SDO格式=3)
    status = ADS8688_WriteRegister(hadc, ADS8688_REG_FEATURE_SEL, 0x03);
 800068c:	2203      	movs	r2, #3
 800068e:	2103      	movs	r1, #3
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f836 	bl	8000702 <ADS8688_WriteRegister>
 8000696:	4603      	mov	r3, r0
 8000698:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) {
 800069a:	7afb      	ldrb	r3, [r7, #11]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <ADS8688_Init+0x9c>
        return status;
 80006a0:	7afb      	ldrb	r3, [r7, #11]
 80006a2:	e02a      	b.n	80006fa <ADS8688_Init+0xf2>
    }
    ADS8688_Delay(10);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f000 fa9f 	bl	8000be8 <ADS8688_Delay>
    
    // 设置所有通道范围为0-5V (0x06)
    for (int i = 0; i < 8; i++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e015      	b.n	80006dc <ADS8688_Init+0xd4>
        status = ADS8688_WriteRegister(hadc, ADS8688_REG_CH0_RANGE_SEL + i, 0x06);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	3305      	adds	r3, #5
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2206      	movs	r2, #6
 80006ba:	4619      	mov	r1, r3
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 f820 	bl	8000702 <ADS8688_WriteRegister>
 80006c2:	4603      	mov	r3, r0
 80006c4:	72fb      	strb	r3, [r7, #11]
        if (status != HAL_OK) {
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <ADS8688_Init+0xc8>
            return status;
 80006cc:	7afb      	ldrb	r3, [r7, #11]
 80006ce:	e014      	b.n	80006fa <ADS8688_Init+0xf2>
        }
        ADS8688_Delay(10);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f000 fa89 	bl	8000be8 <ADS8688_Delay>
    for (int i = 0; i < 8; i++) {
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b07      	cmp	r3, #7
 80006e0:	dde6      	ble.n	80006b0 <ADS8688_Init+0xa8>
    }
    
    // 启动自动扫描
    status = ADS8688_SendCommand(hadc, 0xA0);  // AUTO_RST命令
 80006e2:	21a0      	movs	r1, #160	@ 0xa0
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 fa23 	bl	8000b30 <ADS8688_SendCommand>
 80006ea:	4603      	mov	r3, r0
 80006ec:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) {
 80006ee:	7afb      	ldrb	r3, [r7, #11]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <ADS8688_Init+0xf0>
        return status;
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	e000      	b.n	80006fa <ADS8688_Init+0xf2>
    }
    
    return HAL_OK;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <ADS8688_WriteRegister>:
 * @param reg_addr 寄存器地址
 * @param data 数据
 * @retval HAL_StatusTypeDef 状态
 */
HAL_StatusTypeDef ADS8688_WriteRegister(ADS8688_Handle_t *hadc, uint8_t reg_addr, uint8_t data)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	460b      	mov	r3, r1
 800070c:	70fb      	strb	r3, [r7, #3]
 800070e:	4613      	mov	r3, r2
 8000710:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t tx_data[2];
    uint8_t rx_data[4];
    
    if (hadc == NULL) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <ADS8688_WriteRegister+0x1a>
        return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e015      	b.n	8000748 <ADS8688_WriteRegister+0x46>
    }
    
    // 构建写命令 (参考开源代码)
    tx_data[0] = data;
 800071c:	78bb      	ldrb	r3, [r7, #2]
 800071e:	733b      	strb	r3, [r7, #12]
    tx_data[1] = (reg_addr << 1) | 0x01;  // 地址左移1位，最低位为1表示写入
 8000720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b25b      	sxtb	r3, r3
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	b25b      	sxtb	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	737b      	strb	r3, [r7, #13]
    
    // 发送写命令
    status = ADS8688_TransmitReceive(hadc, tx_data, rx_data, 2);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	f107 010c 	add.w	r1, r7, #12
 800073a:	2302      	movs	r3, #2
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 fa0f 	bl	8000b60 <ADS8688_TransmitReceive>
 8000742:	4603      	mov	r3, r0
 8000744:	73fb      	strb	r3, [r7, #15]
    
    return status;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <ADS8688_ReadRegister>:
 * @param reg_addr 寄存器地址
 * @param data 数据缓冲区
 * @retval HAL_StatusTypeDef 状态
 */
HAL_StatusTypeDef ADS8688_ReadRegister(ADS8688_Handle_t *hadc, uint8_t reg_addr, uint8_t *data)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	460b      	mov	r3, r1
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef status;
    uint8_t tx_data[2];
    uint8_t rx_data[4];
    
    if (hadc == NULL || data == NULL) {
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <ADS8688_ReadRegister+0x1a>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <ADS8688_ReadRegister+0x1e>
        return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e01c      	b.n	80007a8 <ADS8688_ReadRegister+0x58>
    }
    
    // 构建读命令 (参考开源代码)
    tx_data[0] = 0x00;
 800076e:	2300      	movs	r3, #0
 8000770:	753b      	strb	r3, [r7, #20]
    tx_data[1] = (reg_addr << 1) & 0xFE;  // 地址左移1位，最低位为0表示读取
 8000772:	7afb      	ldrb	r3, [r7, #11]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	757b      	strb	r3, [r7, #21]
    
    // 发送读命令
    status = ADS8688_TransmitReceive(hadc, tx_data, rx_data, 2);
 800077a:	f107 0210 	add.w	r2, r7, #16
 800077e:	f107 0114 	add.w	r1, r7, #20
 8000782:	2302      	movs	r3, #2
 8000784:	68f8      	ldr	r0, [r7, #12]
 8000786:	f000 f9eb 	bl	8000b60 <ADS8688_TransmitReceive>
 800078a:	4603      	mov	r3, r0
 800078c:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <ADS8688_ReadRegister+0x48>
        return status;
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	e007      	b.n	80007a8 <ADS8688_ReadRegister+0x58>
    }
    
    // 返回的数据在rx_data[2]和rx_data[3]中
    data[0] = rx_data[2];
 8000798:	7cba      	ldrb	r2, [r7, #18]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	701a      	strb	r2, [r3, #0]
    data[1] = rx_data[3];
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	3301      	adds	r3, #1
 80007a2:	7cfa      	ldrb	r2, [r7, #19]
 80007a4:	701a      	strb	r2, [r3, #0]
    
    return HAL_OK;
 80007a6:	2300      	movs	r3, #0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <ADS8688_GetChannelRange>:
 * @param channel 通道编号
 * @param range 输入范围缓冲区
 * @retval HAL_StatusTypeDef 状态
 */
HAL_StatusTypeDef ADS8688_GetChannelRange(ADS8688_Handle_t *hadc, ADS8688_Channel_t channel, ADS8688_Range_t *range)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	460b      	mov	r3, r1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	72fb      	strb	r3, [r7, #11]
    uint8_t reg_addr;
    uint8_t data;
    HAL_StatusTypeDef status;
    
    if (hadc == NULL || channel > ADS8688_CH7 || range == NULL) {
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d005      	beq.n	80007d0 <ADS8688_GetChannelRange+0x20>
 80007c4:	7afb      	ldrb	r3, [r7, #11]
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	d802      	bhi.n	80007d0 <ADS8688_GetChannelRange+0x20>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d101      	bne.n	80007d4 <ADS8688_GetChannelRange+0x24>
        return HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e012      	b.n	80007fa <ADS8688_GetChannelRange+0x4a>
    }
    
    // 计算寄存器地址
    reg_addr = ADS8688_REG_CH0_RANGE_SEL + channel;
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	3305      	adds	r3, #5
 80007d8:	75fb      	strb	r3, [r7, #23]
    
    // 读取范围值
    status = ADS8688_ReadRegister(hadc, reg_addr, &data);
 80007da:	f107 0215 	add.w	r2, r7, #21
 80007de:	7dfb      	ldrb	r3, [r7, #23]
 80007e0:	4619      	mov	r1, r3
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f7ff ffb4 	bl	8000750 <ADS8688_ReadRegister>
 80007e8:	4603      	mov	r3, r0
 80007ea:	75bb      	strb	r3, [r7, #22]
    if (status == HAL_OK) {
 80007ec:	7dbb      	ldrb	r3, [r7, #22]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d102      	bne.n	80007f8 <ADS8688_GetChannelRange+0x48>
        *range = (ADS8688_Range_t)data;
 80007f2:	7d7a      	ldrb	r2, [r7, #21]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	701a      	strb	r2, [r3, #0]
    }
    
    return status;
 80007f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <ADS8688_ReadData>:
 * @param hadc ADS8688 句柄
 * @param data 数据缓冲区
 * @retval HAL_StatusTypeDef 状态
 */
HAL_StatusTypeDef ADS8688_ReadData(ADS8688_Handle_t *hadc, uint16_t *data)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b084      	sub	sp, #16
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    uint8_t tx_data[2];
    uint8_t rx_data[2];
    
    if (hadc == NULL || data == NULL) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <ADS8688_ReadData+0x16>
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <ADS8688_ReadData+0x1a>
        return HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	e01e      	b.n	800085a <ADS8688_ReadData+0x58>
    }
    
    // 发送无操作命令以读取数据
    tx_data[0] = ADS8688_CMD_NO_OP >> 8;
 800081c:	2300      	movs	r3, #0
 800081e:	733b      	strb	r3, [r7, #12]
    tx_data[1] = ADS8688_CMD_NO_OP & 0xFF;
 8000820:	2300      	movs	r3, #0
 8000822:	737b      	strb	r3, [r7, #13]
    
    status = ADS8688_TransmitReceive(hadc, tx_data, rx_data, 2);
 8000824:	f107 0208 	add.w	r2, r7, #8
 8000828:	f107 010c 	add.w	r1, r7, #12
 800082c:	2302      	movs	r3, #2
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f000 f996 	bl	8000b60 <ADS8688_TransmitReceive>
 8000834:	4603      	mov	r3, r0
 8000836:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <ADS8688_ReadData+0x40>
        return status;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	e00b      	b.n	800085a <ADS8688_ReadData+0x58>
    }
    
    // 组合数据
    *data = ((uint16_t)rx_data[0] << 8) | rx_data[1];
 8000842:	7a3b      	ldrb	r3, [r7, #8]
 8000844:	b21b      	sxth	r3, r3
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b21a      	sxth	r2, r3
 800084a:	7a7b      	ldrb	r3, [r7, #9]
 800084c:	b21b      	sxth	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b21b      	sxth	r3, r3
 8000852:	b29a      	uxth	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	801a      	strh	r2, [r3, #0]
    
    return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <ADS8688_ReadChannel>:
 * @param channel 通道编号
 * @param data 数据缓冲区
 * @retval HAL_StatusTypeDef 状态
 */
HAL_StatusTypeDef ADS8688_ReadChannel(ADS8688_Handle_t *hadc, ADS8688_Channel_t channel, uint16_t *data)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	460b      	mov	r3, r1
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef status;
    uint16_t command;
    
    if (hadc == NULL || data == NULL) {
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <ADS8688_ReadChannel+0x1a>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <ADS8688_ReadChannel+0x1e>
        return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	e01e      	b.n	80008be <ADS8688_ReadChannel+0x5c>
    }
    
    // 获取通道选择命令
    command = ADS8688_GetManualChannelCommand(channel);
 8000880:	7afb      	ldrb	r3, [r7, #11]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f914 	bl	8000ab0 <ADS8688_GetManualChannelCommand>
 8000888:	4603      	mov	r3, r0
 800088a:	82fb      	strh	r3, [r7, #22]
    if (command == 0) {
 800088c:	8afb      	ldrh	r3, [r7, #22]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <ADS8688_ReadChannel+0x34>
        return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e013      	b.n	80008be <ADS8688_ReadChannel+0x5c>
    }
    
    // 发送通道选择命令
    status = ADS8688_SendCommand(hadc, command);
 8000896:	8afb      	ldrh	r3, [r7, #22]
 8000898:	4619      	mov	r1, r3
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f000 f948 	bl	8000b30 <ADS8688_SendCommand>
 80008a0:	4603      	mov	r3, r0
 80008a2:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK) {
 80008a4:	7d7b      	ldrb	r3, [r7, #21]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <ADS8688_ReadChannel+0x4c>
        return status;
 80008aa:	7d7b      	ldrb	r3, [r7, #21]
 80008ac:	e007      	b.n	80008be <ADS8688_ReadChannel+0x5c>
    }
    
    // 等待转换完成
    HAL_Delay(1);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f000 fc0a 	bl	80010c8 <HAL_Delay>
    
    // 读取转换数据
    return ADS8688_ReadData(hadc, data);
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f7ff ffa3 	bl	8000802 <ADS8688_ReadData>
 80008bc:	4603      	mov	r3, r0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <ADS8688_ReadChannelVoltage>:
 * @param channel 通道编号
 * @param voltage 电压值缓冲区
 * @retval HAL_StatusTypeDef 状态
 */
HAL_StatusTypeDef ADS8688_ReadChannelVoltage(ADS8688_Handle_t *hadc, ADS8688_Channel_t channel, float *voltage)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	460b      	mov	r3, r1
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef status;
    uint16_t raw_data;
    ADS8688_Range_t range;
    
    if (hadc == NULL || voltage == NULL) {
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <ADS8688_ReadChannelVoltage+0x1a>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d101      	bne.n	80008e4 <ADS8688_ReadChannelVoltage+0x1e>
        return HAL_ERROR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e025      	b.n	8000930 <ADS8688_ReadChannelVoltage+0x6a>
    }
    
    // 读取原始数据
    status = ADS8688_ReadChannel(hadc, channel, &raw_data);
 80008e4:	f107 0214 	add.w	r2, r7, #20
 80008e8:	7afb      	ldrb	r3, [r7, #11]
 80008ea:	4619      	mov	r1, r3
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f7ff ffb8 	bl	8000862 <ADS8688_ReadChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 80008f6:	7dfb      	ldrb	r3, [r7, #23]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <ADS8688_ReadChannelVoltage+0x3a>
        return status;
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
 80008fe:	e017      	b.n	8000930 <ADS8688_ReadChannelVoltage+0x6a>
    }
    
    // 获取通道范围
    status = ADS8688_GetChannelRange(hadc, channel, &range);
 8000900:	f107 0213 	add.w	r2, r7, #19
 8000904:	7afb      	ldrb	r3, [r7, #11]
 8000906:	4619      	mov	r1, r3
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f7ff ff51 	bl	80007b0 <ADS8688_GetChannelRange>
 800090e:	4603      	mov	r3, r0
 8000910:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <ADS8688_ReadChannelVoltage+0x56>
        return status;
 8000918:	7dfb      	ldrb	r3, [r7, #23]
 800091a:	e009      	b.n	8000930 <ADS8688_ReadChannelVoltage+0x6a>
    }
    
    // 转换为电压值
    *voltage = ADS8688_ConvertToVoltage(raw_data, range);
 800091c:	8abb      	ldrh	r3, [r7, #20]
 800091e:	7cfa      	ldrb	r2, [r7, #19]
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f808 	bl	8000938 <ADS8688_ConvertToVoltage>
 8000928:	4602      	mov	r2, r0
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
    
    return HAL_OK;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <ADS8688_ConvertToVoltage>:
 * @param raw_data 原始数据
 * @param range 输入范围
 * @retval float 电压值
 */
float ADS8688_ConvertToVoltage(uint16_t raw_data, ADS8688_Range_t range)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	80fb      	strh	r3, [r7, #6]
 8000944:	4613      	mov	r3, r2
 8000946:	717b      	strb	r3, [r7, #5]
    float voltage = 0.0f;
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
    float range_factor = 1.0f;
 800094e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000952:	60bb      	str	r3, [r7, #8]
    
    switch (range) {
 8000954:	797b      	ldrb	r3, [r7, #5]
 8000956:	2b06      	cmp	r3, #6
 8000958:	f200 8098 	bhi.w	8000a8c <ADS8688_ConvertToVoltage+0x154>
 800095c:	a201      	add	r2, pc, #4	@ (adr r2, 8000964 <ADS8688_ConvertToVoltage+0x2c>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000981 	.word	0x08000981
 8000968:	080009b9 	.word	0x080009b9
 800096c:	080009f1 	.word	0x080009f1
 8000970:	08000a8d 	.word	0x08000a8d
 8000974:	08000a8d 	.word	0x08000a8d
 8000978:	08000a29 	.word	0x08000a29
 800097c:	08000a5b 	.word	0x08000a5b
        case ADS8688_RANGE_BIPOLAR_10V24:
            range_factor = 2.5f;
 8000980:	4b47      	ldr	r3, [pc, #284]	@ (8000aa0 <ADS8688_ConvertToVoltage+0x168>)
 8000982:	60bb      	str	r3, [r7, #8]
            voltage = ADS8688_RAW_TO_VOLTAGE_BIPOLAR(raw_data, range_factor);
 8000984:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000988:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc97 	bl	80002c0 <__aeabi_i2f>
 8000992:	4603      	mov	r3, r0
 8000994:	4943      	ldr	r1, [pc, #268]	@ (8000aa4 <ADS8688_ConvertToVoltage+0x16c>)
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fce6 	bl	8000368 <__aeabi_fmul>
 800099c:	4603      	mov	r3, r0
 800099e:	68b9      	ldr	r1, [r7, #8]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fce1 	bl	8000368 <__aeabi_fmul>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fd8f 	bl	80004d0 <__aeabi_fdiv>
 80009b2:	4603      	mov	r3, r0
 80009b4:	60fb      	str	r3, [r7, #12]
            break;
 80009b6:	e06d      	b.n	8000a94 <ADS8688_ConvertToVoltage+0x15c>
        case ADS8688_RANGE_BIPOLAR_5V12:
            range_factor = 1.25f;
 80009b8:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa8 <ADS8688_ConvertToVoltage+0x170>)
 80009ba:	60bb      	str	r3, [r7, #8]
            voltage = ADS8688_RAW_TO_VOLTAGE_BIPOLAR(raw_data, range_factor);
 80009bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fc7b 	bl	80002c0 <__aeabi_i2f>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4935      	ldr	r1, [pc, #212]	@ (8000aa4 <ADS8688_ConvertToVoltage+0x16c>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fcca 	bl	8000368 <__aeabi_fmul>
 80009d4:	4603      	mov	r3, r0
 80009d6:	68b9      	ldr	r1, [r7, #8]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fcc5 	bl	8000368 <__aeabi_fmul>
 80009de:	4603      	mov	r3, r0
 80009e0:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fd73 	bl	80004d0 <__aeabi_fdiv>
 80009ea:	4603      	mov	r3, r0
 80009ec:	60fb      	str	r3, [r7, #12]
            break;
 80009ee:	e051      	b.n	8000a94 <ADS8688_ConvertToVoltage+0x15c>
        case ADS8688_RANGE_BIPOLAR_2V56:
            range_factor = 0.625f;
 80009f0:	4b2e      	ldr	r3, [pc, #184]	@ (8000aac <ADS8688_ConvertToVoltage+0x174>)
 80009f2:	60bb      	str	r3, [r7, #8]
            voltage = ADS8688_RAW_TO_VOLTAGE_BIPOLAR(raw_data, range_factor);
 80009f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fc5f 	bl	80002c0 <__aeabi_i2f>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4927      	ldr	r1, [pc, #156]	@ (8000aa4 <ADS8688_ConvertToVoltage+0x16c>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fcae 	bl	8000368 <__aeabi_fmul>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fca9 	bl	8000368 <__aeabi_fmul>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fd57 	bl	80004d0 <__aeabi_fdiv>
 8000a22:	4603      	mov	r3, r0
 8000a24:	60fb      	str	r3, [r7, #12]
            break;
 8000a26:	e035      	b.n	8000a94 <ADS8688_ConvertToVoltage+0x15c>
        case ADS8688_RANGE_UNIPOLAR_10V24:
            range_factor = 2.5f;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <ADS8688_ConvertToVoltage+0x168>)
 8000a2a:	60bb      	str	r3, [r7, #8]
            voltage = ADS8688_RAW_TO_VOLTAGE_UNIPOLAR(raw_data, range_factor);
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fc46 	bl	80002c0 <__aeabi_i2f>
 8000a34:	4603      	mov	r3, r0
 8000a36:	491b      	ldr	r1, [pc, #108]	@ (8000aa4 <ADS8688_ConvertToVoltage+0x16c>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fc95 	bl	8000368 <__aeabi_fmul>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fc90 	bl	8000368 <__aeabi_fmul>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fd3e 	bl	80004d0 <__aeabi_fdiv>
 8000a54:	4603      	mov	r3, r0
 8000a56:	60fb      	str	r3, [r7, #12]
            break;
 8000a58:	e01c      	b.n	8000a94 <ADS8688_ConvertToVoltage+0x15c>
        case ADS8688_RANGE_UNIPOLAR_5V12:
            range_factor = 1.25f;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <ADS8688_ConvertToVoltage+0x170>)
 8000a5c:	60bb      	str	r3, [r7, #8]
            voltage = ADS8688_RAW_TO_VOLTAGE_UNIPOLAR(raw_data, range_factor);
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fc2d 	bl	80002c0 <__aeabi_i2f>
 8000a66:	4603      	mov	r3, r0
 8000a68:	490e      	ldr	r1, [pc, #56]	@ (8000aa4 <ADS8688_ConvertToVoltage+0x16c>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fc7c 	bl	8000368 <__aeabi_fmul>
 8000a70:	4603      	mov	r3, r0
 8000a72:	68b9      	ldr	r1, [r7, #8]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fc77 	bl	8000368 <__aeabi_fmul>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fd25 	bl	80004d0 <__aeabi_fdiv>
 8000a86:	4603      	mov	r3, r0
 8000a88:	60fb      	str	r3, [r7, #12]
            break;
 8000a8a:	e003      	b.n	8000a94 <ADS8688_ConvertToVoltage+0x15c>
        default:
            voltage = 0.0f;
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
            break;
 8000a92:	bf00      	nop
    }
    
    return voltage;
 8000a94:	68fb      	ldr	r3, [r7, #12]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40200000 	.word	0x40200000
 8000aa4:	4083126f 	.word	0x4083126f
 8000aa8:	3fa00000 	.word	0x3fa00000
 8000aac:	3f200000 	.word	0x3f200000

08000ab0 <ADS8688_GetManualChannelCommand>:
 * @brief 获取手动通道选择命令
 * @param channel 通道编号
 * @retval uint16_t 命令值
 */
uint16_t ADS8688_GetManualChannelCommand(ADS8688_Channel_t channel)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
    switch (channel) {
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b08      	cmp	r3, #8
 8000abe:	d830      	bhi.n	8000b22 <ADS8688_GetManualChannelCommand+0x72>
 8000ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac8 <ADS8688_GetManualChannelCommand+0x18>)
 8000ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac6:	bf00      	nop
 8000ac8:	08000aed 	.word	0x08000aed
 8000acc:	08000af3 	.word	0x08000af3
 8000ad0:	08000af9 	.word	0x08000af9
 8000ad4:	08000aff 	.word	0x08000aff
 8000ad8:	08000b05 	.word	0x08000b05
 8000adc:	08000b0b 	.word	0x08000b0b
 8000ae0:	08000b11 	.word	0x08000b11
 8000ae4:	08000b17 	.word	0x08000b17
 8000ae8:	08000b1d 	.word	0x08000b1d
        case ADS8688_CH0:
            return ADS8688_CMD_MAN_CH0;
 8000aec:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000af0:	e018      	b.n	8000b24 <ADS8688_GetManualChannelCommand+0x74>
        case ADS8688_CH1:
            return ADS8688_CMD_MAN_CH1;
 8000af2:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000af6:	e015      	b.n	8000b24 <ADS8688_GetManualChannelCommand+0x74>
        case ADS8688_CH2:
            return ADS8688_CMD_MAN_CH2;
 8000af8:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8000afc:	e012      	b.n	8000b24 <ADS8688_GetManualChannelCommand+0x74>
        case ADS8688_CH3:
            return ADS8688_CMD_MAN_CH3;
 8000afe:	f44f 434c 	mov.w	r3, #52224	@ 0xcc00
 8000b02:	e00f      	b.n	8000b24 <ADS8688_GetManualChannelCommand+0x74>
        case ADS8688_CH4:
            return ADS8688_CMD_MAN_CH4;
 8000b04:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000b08:	e00c      	b.n	8000b24 <ADS8688_GetManualChannelCommand+0x74>
        case ADS8688_CH5:
            return ADS8688_CMD_MAN_CH5;
 8000b0a:	f44f 4354 	mov.w	r3, #54272	@ 0xd400
 8000b0e:	e009      	b.n	8000b24 <ADS8688_GetManualChannelCommand+0x74>
        case ADS8688_CH6:
            return ADS8688_CMD_MAN_CH6;
 8000b10:	f44f 4358 	mov.w	r3, #55296	@ 0xd800
 8000b14:	e006      	b.n	8000b24 <ADS8688_GetManualChannelCommand+0x74>
        case ADS8688_CH7:
            return ADS8688_CMD_MAN_CH7;
 8000b16:	f44f 435c 	mov.w	r3, #56320	@ 0xdc00
 8000b1a:	e003      	b.n	8000b24 <ADS8688_GetManualChannelCommand+0x74>
        case ADS8688_AUX:
            return ADS8688_CMD_MAN_AUX;
 8000b1c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b20:	e000      	b.n	8000b24 <ADS8688_GetManualChannelCommand+0x74>
        default:
            return 0;
 8000b22:	2300      	movs	r3, #0
    }
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <ADS8688_SendCommand>:
 * @param hadc ADS8688 句柄
 * @param command 命令
 * @retval HAL_StatusTypeDef 状态
 */
static HAL_StatusTypeDef ADS8688_SendCommand(ADS8688_Handle_t *hadc, uint16_t command)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
    uint8_t tx_data[2];
    uint8_t rx_data[4];
    
    // 参考开源代码的命令格式
    tx_data[0] = 0x00;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	733b      	strb	r3, [r7, #12]
    tx_data[1] = (uint8_t)(command & 0xFF);
 8000b40:	887b      	ldrh	r3, [r7, #2]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	737b      	strb	r3, [r7, #13]
    
    return ADS8688_TransmitReceive(hadc, tx_data, rx_data, 2);
 8000b46:	f107 0208 	add.w	r2, r7, #8
 8000b4a:	f107 010c 	add.w	r1, r7, #12
 8000b4e:	2302      	movs	r3, #2
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f805 	bl	8000b60 <ADS8688_TransmitReceive>
 8000b56:	4603      	mov	r3, r0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <ADS8688_TransmitReceive>:
 * @param rx_data 接收数据
 * @param size 数据大小
 * @retval HAL_StatusTypeDef 状态
 */
static HAL_StatusTypeDef ADS8688_TransmitReceive(ADS8688_Handle_t *hadc, uint8_t *tx_data, uint8_t *rx_data, uint16_t size)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    
    // 拉低 CS 开始传输
    ADS8688_SetCS(false);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f816 	bl	8000ba0 <ADS8688_SetCS>
    
    // SPI 传输 (注意：开源代码使用16位传输，但我们仍然用8位字节数组)
    status = HAL_SPI_TransmitReceive(hadc->hspi, tx_data, rx_data, size, hadc->timeout);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	887a      	ldrh	r2, [r7, #2]
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	4613      	mov	r3, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	f001 f9bf 	bl	8001f08 <HAL_SPI_TransmitReceive>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	75fb      	strb	r3, [r7, #23]
    
    // 拉高 CS 结束传输
    ADS8688_SetCS(true);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f000 f806 	bl	8000ba0 <ADS8688_SetCS>
    
    return status;
 8000b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <ADS8688_SetCS>:
/**
 * @brief 设置 CS 引脚状态
 * @param state 引脚状态
 */
static void ADS8688_SetCS(bool state)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ADS8688_CS_GPIO_Port, ADS8688_CS_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	461a      	mov	r2, r3
 8000bae:	2102      	movs	r1, #2
 8000bb0:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <ADS8688_SetCS+0x20>)
 8000bb2:	f000 fd15 	bl	80015e0 <HAL_GPIO_WritePin>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40010c00 	.word	0x40010c00

08000bc4 <ADS8688_SetRST>:
/**
 * @brief 设置 RST 引脚状态
 * @param state 引脚状态
 */
static void ADS8688_SetRST(bool state)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ADS8688_RST_GPIO_Port, ADS8688_RST_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	@ (8000be4 <ADS8688_SetRST+0x20>)
 8000bd6:	f000 fd03 	bl	80015e0 <HAL_GPIO_WritePin>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40010c00 	.word	0x40010c00

08000be8 <ADS8688_Delay>:
/**
 * @brief 延时函数
 * @param ms 延时时间（毫秒）
 */
static void ADS8688_Delay(uint32_t ms)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fa69 	bl	80010c8 <HAL_Delay>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	4b2d      	ldr	r3, [pc, #180]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a2c      	ldr	r2, [pc, #176]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a26      	ldr	r2, [pc, #152]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c32:	f043 0320 	orr.w	r3, r3, #32
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0320 	and.w	r3, r3, #32
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a20      	ldr	r2, [pc, #128]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a1a      	ldr	r2, [pc, #104]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_GPIO_Init+0xcc>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c7a:	4815      	ldr	r0, [pc, #84]	@ (8000cd0 <MX_GPIO_Init+0xd0>)
 8000c7c:	f000 fcb0 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADS8688_RST_Pin|ADS8688_CS_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2103      	movs	r1, #3
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <MX_GPIO_Init+0xd4>)
 8000c86:	f000 fcab 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <MX_GPIO_Init+0xd0>)
 8000ca4:	f000 fb18 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADS8688_RST_Pin ADS8688_CS_Pin */
  GPIO_InitStruct.Pin = ADS8688_RST_Pin|ADS8688_CS_Pin;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_GPIO_Init+0xd4>)
 8000cc0:	f000 fb0a 	bl	80012d8 <HAL_GPIO_Init>

}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	40010c00 	.word	0x40010c00

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cde:	f000 f991 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce2:	f000 f837 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f7ff ff8b 	bl	8000c00 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cea:	f000 f87f 	bl	8000dec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  
  /* 初始化 ADS8688 */
  hadc8688.hspi = &hspi1;
 8000cee:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <main+0x70>)
 8000cf0:	4a16      	ldr	r2, [pc, #88]	@ (8000d4c <main+0x74>)
 8000cf2:	601a      	str	r2, [r3, #0]
  hadc8688.timeout = 100;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <main+0x70>)
 8000cf6:	2264      	movs	r2, #100	@ 0x64
 8000cf8:	605a      	str	r2, [r3, #4]
  
  if (ADS8688_Init(&hadc8688) == HAL_OK) {
 8000cfa:	4813      	ldr	r0, [pc, #76]	@ (8000d48 <main+0x70>)
 8000cfc:	f7ff fc84 	bl	8000608 <ADS8688_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d106      	bne.n	8000d14 <main+0x3c>
    // ADS8688 初始化成功
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // LED点亮表示初始化成功
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d0c:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <main+0x78>)
 8000d0e:	f000 fc67 	bl	80015e0 <HAL_GPIO_WritePin>
 8000d12:	e008      	b.n	8000d26 <main+0x4e>
  } else {
    // ADS8688 初始化失败
    while(1) {
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // LED快速闪烁表示错误
 8000d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d18:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <main+0x78>)
 8000d1a:	f000 fc79 	bl	8001610 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8000d1e:	2064      	movs	r0, #100	@ 0x64
 8000d20:	f000 f9d2 	bl	80010c8 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // LED快速闪烁表示错误
 8000d24:	e7f6      	b.n	8000d14 <main+0x3c>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* 读取 ADS8688 通道0的电压值 */
    float voltage;
    if (ADS8688_ReadChannelVoltage(&hadc8688, ADS8688_CH0, &voltage) == HAL_OK) {
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	461a      	mov	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <main+0x70>)
 8000d2e:	f7ff fdca 	bl	80008c6 <ADS8688_ReadChannelVoltage>
      // 电压读取成功，可以在此处理电压值
      // 例如：通过串口发送或存储数据
    }
    
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // 翻转LED引脚状态
 8000d32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d36:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <main+0x78>)
 8000d38:	f000 fc6a 	bl	8001610 <HAL_GPIO_TogglePin>
    HAL_Delay(1000); // 延时1000毫秒，每秒采样一次
 8000d3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d40:	f000 f9c2 	bl	80010c8 <HAL_Delay>
  {
 8000d44:	e7ef      	b.n	8000d26 <main+0x4e>
 8000d46:	bf00      	nop
 8000d48:	20000028 	.word	0x20000028
 8000d4c:	20000030 	.word	0x20000030
 8000d50:	40011000 	.word	0x40011000

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b090      	sub	sp, #64	@ 0x40
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	2228      	movs	r2, #40	@ 0x28
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 fb33 	bl	80023ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d84:	2301      	movs	r3, #1
 8000d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d92:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fc51 	bl	8001644 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000da8:	f000 f819 	bl	8000dde <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	230f      	movs	r3, #15
 8000dae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db0:	2302      	movs	r3, #2
 8000db2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 febe 	bl	8001b48 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dd2:	f000 f804 	bl	8000dde <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3740      	adds	r7, #64	@ 0x40
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de2:	b672      	cpsid	i
}
 8000de4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de6:	bf00      	nop
 8000de8:	e7fd      	b.n	8000de6 <Error_Handler+0x8>
	...

08000dec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000df2:	4a19      	ldr	r2, [pc, #100]	@ (8000e58 <MX_SPI1_Init+0x6c>)
 8000df4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000df6:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000df8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e18:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e22:	2208      	movs	r2, #8
 8000e24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_SPI1_Init+0x68>)
 8000e40:	f000 ffde 	bl	8001e00 <HAL_SPI_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000e4a:	f7ff ffc8 	bl	8000dde <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000030 	.word	0x20000030
 8000e58:	40013000 	.word	0x40013000

08000e5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d12f      	bne.n	8000edc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a19      	ldr	r2, [pc, #100]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e82:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a13      	ldr	r2, [pc, #76]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000eac:	23a0      	movs	r3, #160	@ 0xa0
 8000eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480b      	ldr	r0, [pc, #44]	@ (8000eec <HAL_SPI_MspInit+0x90>)
 8000ec0:	f000 fa0a 	bl	80012d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ec4:	2340      	movs	r3, #64	@ 0x40
 8000ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <HAL_SPI_MspInit+0x90>)
 8000ed8:	f000 f9fe 	bl	80012d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40013000 	.word	0x40013000
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010800 	.word	0x40010800

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <HAL_MspInit+0x5c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <HAL_MspInit+0x5c>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <HAL_MspInit+0x5c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <HAL_MspInit+0x5c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a0e      	ldr	r2, [pc, #56]	@ (8000f4c <HAL_MspInit+0x5c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <HAL_MspInit+0x5c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <HAL_MspInit+0x60>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <HAL_MspInit+0x60>)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010000 	.word	0x40010000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <NMI_Handler+0x4>

08000f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f874 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb8:	f7ff fff8 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480b      	ldr	r0, [pc, #44]	@ (8000fec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fbe:	490c      	ldr	r1, [pc, #48]	@ (8000ff0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a09      	ldr	r2, [pc, #36]	@ (8000ff8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fd4:	4c09      	ldr	r4, [pc, #36]	@ (8000ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f001 f9fd 	bl	80023e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe6:	f7ff fe77 	bl	8000cd8 <main>
  bx lr
 8000fea:	4770      	bx	lr
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ff4:	0800246c 	.word	0x0800246c
  ldr r2, =_sbss
 8000ff8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ffc:	2000008c 	.word	0x2000008c

08001000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_2_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_Init+0x28>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	@ (800102c <HAL_Init+0x28>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f92b 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	200f      	movs	r0, #15
 800101c:	f000 f808 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff ff66 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40022000 	.word	0x40022000

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f935 	bl	80012be <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 f90b 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000000 	.word	0x20000000
 8001088:	20000008 	.word	0x20000008
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <HAL_IncTick+0x1c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_IncTick+0x20>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a03      	ldr	r2, [pc, #12]	@ (80010b0 <HAL_IncTick+0x20>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000088 	.word	0x20000088

080010b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <HAL_GetTick+0x10>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	20000088 	.word	0x20000088

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff fff0 	bl	80010b4 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ee:	bf00      	nop
 80010f0:	f7ff ffe0 	bl	80010b4 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	@ (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	@ 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff90 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff49 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff5e 	bl	8001158 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff90 	bl	80011c8 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5f 	bl	8001174 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffb0 	bl	800122c <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b08b      	sub	sp, #44	@ 0x2c
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	e169      	b.n	80015c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012ec:	2201      	movs	r2, #1
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8158 	bne.w	80015ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a9a      	ldr	r2, [pc, #616]	@ (8001578 <HAL_GPIO_Init+0x2a0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d05e      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001314:	4a98      	ldr	r2, [pc, #608]	@ (8001578 <HAL_GPIO_Init+0x2a0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d875      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800131a:	4a98      	ldr	r2, [pc, #608]	@ (800157c <HAL_GPIO_Init+0x2a4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d058      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001320:	4a96      	ldr	r2, [pc, #600]	@ (800157c <HAL_GPIO_Init+0x2a4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d86f      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001326:	4a96      	ldr	r2, [pc, #600]	@ (8001580 <HAL_GPIO_Init+0x2a8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d052      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 800132c:	4a94      	ldr	r2, [pc, #592]	@ (8001580 <HAL_GPIO_Init+0x2a8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d869      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001332:	4a94      	ldr	r2, [pc, #592]	@ (8001584 <HAL_GPIO_Init+0x2ac>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d04c      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001338:	4a92      	ldr	r2, [pc, #584]	@ (8001584 <HAL_GPIO_Init+0x2ac>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d863      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800133e:	4a92      	ldr	r2, [pc, #584]	@ (8001588 <HAL_GPIO_Init+0x2b0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d046      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001344:	4a90      	ldr	r2, [pc, #576]	@ (8001588 <HAL_GPIO_Init+0x2b0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d85d      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d82a      	bhi.n	80013a4 <HAL_GPIO_Init+0xcc>
 800134e:	2b12      	cmp	r3, #18
 8001350:	d859      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001352:	a201      	add	r2, pc, #4	@ (adr r2, 8001358 <HAL_GPIO_Init+0x80>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	080013d3 	.word	0x080013d3
 800135c:	080013ad 	.word	0x080013ad
 8001360:	080013bf 	.word	0x080013bf
 8001364:	08001401 	.word	0x08001401
 8001368:	08001407 	.word	0x08001407
 800136c:	08001407 	.word	0x08001407
 8001370:	08001407 	.word	0x08001407
 8001374:	08001407 	.word	0x08001407
 8001378:	08001407 	.word	0x08001407
 800137c:	08001407 	.word	0x08001407
 8001380:	08001407 	.word	0x08001407
 8001384:	08001407 	.word	0x08001407
 8001388:	08001407 	.word	0x08001407
 800138c:	08001407 	.word	0x08001407
 8001390:	08001407 	.word	0x08001407
 8001394:	08001407 	.word	0x08001407
 8001398:	08001407 	.word	0x08001407
 800139c:	080013b5 	.word	0x080013b5
 80013a0:	080013c9 	.word	0x080013c9
 80013a4:	4a79      	ldr	r2, [pc, #484]	@ (800158c <HAL_GPIO_Init+0x2b4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013aa:	e02c      	b.n	8001406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	623b      	str	r3, [r7, #32]
          break;
 80013b2:	e029      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	3304      	adds	r3, #4
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	e024      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	3308      	adds	r3, #8
 80013c4:	623b      	str	r3, [r7, #32]
          break;
 80013c6:	e01f      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	330c      	adds	r3, #12
 80013ce:	623b      	str	r3, [r7, #32]
          break;
 80013d0:	e01a      	b.n	8001408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013da:	2304      	movs	r3, #4
 80013dc:	623b      	str	r3, [r7, #32]
          break;
 80013de:	e013      	b.n	8001408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e8:	2308      	movs	r3, #8
 80013ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	611a      	str	r2, [r3, #16]
          break;
 80013f2:	e009      	b.n	8001408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f4:	2308      	movs	r3, #8
 80013f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69fa      	ldr	r2, [r7, #28]
 80013fc:	615a      	str	r2, [r3, #20]
          break;
 80013fe:	e003      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x130>
          break;
 8001406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2bff      	cmp	r3, #255	@ 0xff
 800140c:	d801      	bhi.n	8001412 <HAL_GPIO_Init+0x13a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	e001      	b.n	8001416 <HAL_GPIO_Init+0x13e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3304      	adds	r3, #4
 8001416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2bff      	cmp	r3, #255	@ 0xff
 800141c:	d802      	bhi.n	8001424 <HAL_GPIO_Init+0x14c>
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	e002      	b.n	800142a <HAL_GPIO_Init+0x152>
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	3b08      	subs	r3, #8
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	210f      	movs	r1, #15
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	6a39      	ldr	r1, [r7, #32]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80b1 	beq.w	80015ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001458:	4b4d      	ldr	r3, [pc, #308]	@ (8001590 <HAL_GPIO_Init+0x2b8>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a4c      	ldr	r2, [pc, #304]	@ (8001590 <HAL_GPIO_Init+0x2b8>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b4a      	ldr	r3, [pc, #296]	@ (8001590 <HAL_GPIO_Init+0x2b8>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001470:	4a48      	ldr	r2, [pc, #288]	@ (8001594 <HAL_GPIO_Init+0x2bc>)
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a40      	ldr	r2, [pc, #256]	@ (8001598 <HAL_GPIO_Init+0x2c0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d013      	beq.n	80014c4 <HAL_GPIO_Init+0x1ec>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3f      	ldr	r2, [pc, #252]	@ (800159c <HAL_GPIO_Init+0x2c4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00d      	beq.n	80014c0 <HAL_GPIO_Init+0x1e8>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a3e      	ldr	r2, [pc, #248]	@ (80015a0 <HAL_GPIO_Init+0x2c8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x1e4>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a3d      	ldr	r2, [pc, #244]	@ (80015a4 <HAL_GPIO_Init+0x2cc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_GPIO_Init+0x1e0>
 80014b4:	2303      	movs	r3, #3
 80014b6:	e006      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014b8:	2304      	movs	r3, #4
 80014ba:	e004      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014bc:	2302      	movs	r3, #2
 80014be:	e002      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014c4:	2300      	movs	r3, #0
 80014c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c8:	f002 0203 	and.w	r2, r2, #3
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	4093      	lsls	r3, r2
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014d6:	492f      	ldr	r1, [pc, #188]	@ (8001594 <HAL_GPIO_Init+0x2bc>)
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f0:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	492c      	ldr	r1, [pc, #176]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014fe:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	43db      	mvns	r3, r3
 8001506:	4928      	ldr	r1, [pc, #160]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001508:	4013      	ands	r3, r2
 800150a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001518:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	4922      	ldr	r1, [pc, #136]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	60cb      	str	r3, [r1, #12]
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001526:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	43db      	mvns	r3, r3
 800152e:	491e      	ldr	r1, [pc, #120]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001530:	4013      	ands	r3, r2
 8001532:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4918      	ldr	r1, [pc, #96]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	43db      	mvns	r3, r3
 8001556:	4914      	ldr	r1, [pc, #80]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001558:	4013      	ands	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d021      	beq.n	80015ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	490e      	ldr	r1, [pc, #56]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
 8001574:	e021      	b.n	80015ba <HAL_GPIO_Init+0x2e2>
 8001576:	bf00      	nop
 8001578:	10320000 	.word	0x10320000
 800157c:	10310000 	.word	0x10310000
 8001580:	10220000 	.word	0x10220000
 8001584:	10210000 	.word	0x10210000
 8001588:	10120000 	.word	0x10120000
 800158c:	10110000 	.word	0x10110000
 8001590:	40021000 	.word	0x40021000
 8001594:	40010000 	.word	0x40010000
 8001598:	40010800 	.word	0x40010800
 800159c:	40010c00 	.word	0x40010c00
 80015a0:	40011000 	.word	0x40011000
 80015a4:	40011400 	.word	0x40011400
 80015a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_GPIO_Init+0x304>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	4909      	ldr	r1, [pc, #36]	@ (80015dc <HAL_GPIO_Init+0x304>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	3301      	adds	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f47f ae8e 	bne.w	80012ec <HAL_GPIO_Init+0x14>
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	372c      	adds	r7, #44	@ 0x2c
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	611a      	str	r2, [r3, #16]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4013      	ands	r3, r2
 8001628:	041a      	lsls	r2, r3, #16
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43d9      	mvns	r1, r3
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	400b      	ands	r3, r1
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	611a      	str	r2, [r3, #16]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
	...

08001644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e272      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8087 	beq.w	8001772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001664:	4b92      	ldr	r3, [pc, #584]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b04      	cmp	r3, #4
 800166e:	d00c      	beq.n	800168a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001670:	4b8f      	ldr	r3, [pc, #572]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d112      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5e>
 800167c:	4b8c      	ldr	r3, [pc, #560]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001688:	d10b      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168a:	4b89      	ldr	r3, [pc, #548]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d06c      	beq.n	8001770 <HAL_RCC_OscConfig+0x12c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d168      	bne.n	8001770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e24c      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x76>
 80016ac:	4b80      	ldr	r3, [pc, #512]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a7f      	ldr	r2, [pc, #508]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e02e      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x98>
 80016c2:	4b7b      	ldr	r3, [pc, #492]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a7a      	ldr	r2, [pc, #488]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b78      	ldr	r3, [pc, #480]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a77      	ldr	r2, [pc, #476]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e01d      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0xbc>
 80016e6:	4b72      	ldr	r3, [pc, #456]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a71      	ldr	r2, [pc, #452]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b6f      	ldr	r3, [pc, #444]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6e      	ldr	r2, [pc, #440]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 8001700:	4b6b      	ldr	r3, [pc, #428]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a6a      	ldr	r2, [pc, #424]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b68      	ldr	r3, [pc, #416]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a67      	ldr	r2, [pc, #412]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fcc8 	bl	80010b4 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fcc4 	bl	80010b4 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	@ 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e200      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b5d      	ldr	r3, [pc, #372]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0xe4>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fcb4 	bl	80010b4 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fcb0 	bl	80010b4 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	@ 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e1ec      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x10c>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d063      	beq.n	8001846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177e:	4b4c      	ldr	r3, [pc, #304]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800178a:	4b49      	ldr	r3, [pc, #292]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b08      	cmp	r3, #8
 8001794:	d11c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x18c>
 8001796:	4b46      	ldr	r3, [pc, #280]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x176>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e1c0      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4939      	ldr	r1, [pc, #228]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e03a      	b.n	8001846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	4b36      	ldr	r3, [pc, #216]	@ (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fc69 	bl	80010b4 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fc65 	bl	80010b4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1a1      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	4b2d      	ldr	r3, [pc, #180]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4927      	ldr	r1, [pc, #156]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <HAL_RCC_OscConfig+0x270>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fc48 	bl	80010b4 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff fc44 	bl	80010b4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e180      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d03a      	beq.n	80018c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d019      	beq.n	800188e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185a:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fc28 	bl	80010b4 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff fc24 	bl	80010b4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e160      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f000 fa9c 	bl	8001dc4 <RCC_Delay>
 800188c:	e01c      	b.n	80018c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff fc0e 	bl	80010b4 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189a:	e00f      	b.n	80018bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff fc0a 	bl	80010b4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d908      	bls.n	80018bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e146      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	42420000 	.word	0x42420000
 80018b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	4b92      	ldr	r3, [pc, #584]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1e9      	bne.n	800189c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a6 	beq.w	8001a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b8b      	ldr	r3, [pc, #556]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b88      	ldr	r3, [pc, #544]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a87      	ldr	r2, [pc, #540]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b85      	ldr	r3, [pc, #532]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b82      	ldr	r3, [pc, #520]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7e      	ldr	r2, [pc, #504]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff fbcb 	bl	80010b4 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff fbc7 	bl	80010b4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	@ 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e103      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b75      	ldr	r3, [pc, #468]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x312>
 8001948:	4b6f      	ldr	r3, [pc, #444]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a6e      	ldr	r2, [pc, #440]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	e02d      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x334>
 800195e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a69      	ldr	r2, [pc, #420]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6213      	str	r3, [r2, #32]
 800196a:	4b67      	ldr	r3, [pc, #412]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a66      	ldr	r2, [pc, #408]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	e01c      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x356>
 8001980:	4b61      	ldr	r3, [pc, #388]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a60      	ldr	r2, [pc, #384]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6213      	str	r3, [r2, #32]
 800198c:	4b5e      	ldr	r3, [pc, #376]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4a5d      	ldr	r2, [pc, #372]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6213      	str	r3, [r2, #32]
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 800199a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	4b58      	ldr	r3, [pc, #352]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a57      	ldr	r2, [pc, #348]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fb7b 	bl	80010b4 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fb77 	bl	80010b4 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0b1      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ee      	beq.n	80019c2 <HAL_RCC_OscConfig+0x37e>
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fb65 	bl	80010b4 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff fb61 	bl	80010b4 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e09b      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ee      	bne.n	80019ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d105      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a16:	4b3c      	ldr	r3, [pc, #240]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8087 	beq.w	8001b3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2c:	4b36      	ldr	r3, [pc, #216]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d061      	beq.n	8001afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d146      	bne.n	8001ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a40:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <HAL_RCC_OscConfig+0x4cc>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff fb35 	bl	80010b4 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff fb31 	bl	80010b4 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e06d      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a60:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	4921      	ldr	r1, [pc, #132]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a88:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a19      	ldr	r1, [r3, #32]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	491b      	ldr	r1, [pc, #108]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_RCC_OscConfig+0x4cc>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fb05 	bl	80010b4 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff fb01 	bl	80010b4 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e03d      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x46a>
 8001acc:	e035      	b.n	8001b3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_RCC_OscConfig+0x4cc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff faee 	bl	80010b4 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff faea 	bl	80010b4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e026      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x498>
 8001afa:	e01e      	b.n	8001b3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e019      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_RCC_OscConfig+0x500>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0d0      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d910      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b67      	ldr	r3, [pc, #412]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 0207 	bic.w	r2, r3, #7
 8001b72:	4965      	ldr	r1, [pc, #404]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b63      	ldr	r3, [pc, #396]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b8      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba4:	4b59      	ldr	r3, [pc, #356]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bbc:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	494d      	ldr	r1, [pc, #308]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d040      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d115      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e07f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c06:	4b41      	ldr	r3, [pc, #260]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e073      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c16:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e06b      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f023 0203 	bic.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4936      	ldr	r1, [pc, #216]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c38:	f7ff fa3c 	bl	80010b4 <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7ff fa38 	bl	80010b4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e053      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 020c 	and.w	r2, r3, #12
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1eb      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c68:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d210      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 0207 	bic.w	r2, r3, #7
 8001c7e:	4922      	ldr	r1, [pc, #136]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e032      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4916      	ldr	r1, [pc, #88]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	490e      	ldr	r1, [pc, #56]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cd6:	f000 f821 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	490a      	ldr	r1, [pc, #40]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	5ccb      	ldrb	r3, [r1, r3]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <HAL_RCC_ClockConfig+0x1cc>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_ClockConfig+0x1d0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f99a 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08002440 	.word	0x08002440
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d36:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x30>
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0x36>
 8001d4a:	e027      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d4e:	613b      	str	r3, [r7, #16]
      break;
 8001d50:	e027      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	0c9b      	lsrs	r3, r3, #18
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d010      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	0c5b      	lsrs	r3, r3, #17
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d7e:	fb03 f202 	mul.w	r2, r3, r2
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e004      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d90:	fb02 f303 	mul.w	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	613b      	str	r3, [r7, #16]
      break;
 8001d9a:	e002      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9e:	613b      	str	r3, [r7, #16]
      break;
 8001da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da2:	693b      	ldr	r3, [r7, #16]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	007a1200 	.word	0x007a1200
 8001db8:	08002450 	.word	0x08002450
 8001dbc:	08002460 	.word	0x08002460
 8001dc0:	003d0900 	.word	0x003d0900

08001dc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <RCC_Delay+0x34>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <RCC_Delay+0x38>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0a5b      	lsrs	r3, r3, #9
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001de0:	bf00      	nop
  }
  while (Delay --);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	60fa      	str	r2, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f9      	bne.n	8001de0 <RCC_Delay+0x1c>
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	10624dd3 	.word	0x10624dd3

08001e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e076      	b.n	8001f00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d108      	bne.n	8001e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e22:	d009      	beq.n	8001e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
 8001e2a:	e005      	b.n	8001e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff f802 	bl	8000e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ebc:	ea42 0103 	orr.w	r1, r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	0c1a      	lsrs	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f002 0204 	and.w	r2, r2, #4
 8001ede:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f16:	2301      	movs	r3, #1
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f1a:	f7ff f8cb 	bl	80010b4 <HAL_GetTick>
 8001f1e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f26:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f32:	7ffb      	ldrb	r3, [r7, #31]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d00c      	beq.n	8001f52 <HAL_SPI_TransmitReceive+0x4a>
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f3e:	d106      	bne.n	8001f4e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <HAL_SPI_TransmitReceive+0x46>
 8001f48:	7ffb      	ldrb	r3, [r7, #31]
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d001      	beq.n	8001f52 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e17f      	b.n	8002252 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x5c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x5c>
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e174      	b.n	8002252 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_SPI_TransmitReceive+0x6e>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e16d      	b.n	8002252 <HAL_SPI_TransmitReceive+0x34a>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d003      	beq.n	8001f92 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	887a      	ldrh	r2, [r7, #2]
 8001fa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	887a      	ldrh	r2, [r7, #2]
 8001fba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd2:	2b40      	cmp	r3, #64	@ 0x40
 8001fd4:	d007      	beq.n	8001fe6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fee:	d17e      	bne.n	80020ee <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_SPI_TransmitReceive+0xf6>
 8001ff8:	8afb      	ldrh	r3, [r7, #22]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d16c      	bne.n	80020d8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	881a      	ldrh	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	1c9a      	adds	r2, r3, #2
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002022:	e059      	b.n	80020d8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d11b      	bne.n	800206a <HAL_SPI_TransmitReceive+0x162>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d016      	beq.n	800206a <HAL_SPI_TransmitReceive+0x162>
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	2b01      	cmp	r3, #1
 8002040:	d113      	bne.n	800206a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	881a      	ldrh	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	1c9a      	adds	r2, r3, #2
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d119      	bne.n	80020ac <HAL_SPI_TransmitReceive+0x1a4>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d014      	beq.n	80020ac <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208c:	b292      	uxth	r2, r2
 800208e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002094:	1c9a      	adds	r2, r3, #2
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020a8:	2301      	movs	r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020ac:	f7ff f802 	bl	80010b4 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d80d      	bhi.n	80020d8 <HAL_SPI_TransmitReceive+0x1d0>
 80020bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c2:	d009      	beq.n	80020d8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0bc      	b.n	8002252 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1a0      	bne.n	8002024 <HAL_SPI_TransmitReceive+0x11c>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d19b      	bne.n	8002024 <HAL_SPI_TransmitReceive+0x11c>
 80020ec:	e082      	b.n	80021f4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_SPI_TransmitReceive+0x1f4>
 80020f6:	8afb      	ldrh	r3, [r7, #22]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d171      	bne.n	80021e0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	330c      	adds	r3, #12
 8002106:	7812      	ldrb	r2, [r2, #0]
 8002108:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002122:	e05d      	b.n	80021e0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b02      	cmp	r3, #2
 8002130:	d11c      	bne.n	800216c <HAL_SPI_TransmitReceive+0x264>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d017      	beq.n	800216c <HAL_SPI_TransmitReceive+0x264>
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	2b01      	cmp	r3, #1
 8002140:	d114      	bne.n	800216c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d119      	bne.n	80021ae <HAL_SPI_TransmitReceive+0x2a6>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800217e:	b29b      	uxth	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d014      	beq.n	80021ae <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021aa:	2301      	movs	r3, #1
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021ae:	f7fe ff81 	bl	80010b4 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d803      	bhi.n	80021c6 <HAL_SPI_TransmitReceive+0x2be>
 80021be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d102      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x2c4>
 80021c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e038      	b.n	8002252 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d19c      	bne.n	8002124 <HAL_SPI_TransmitReceive+0x21c>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d197      	bne.n	8002124 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021f4:	6a3a      	ldr	r2, [r7, #32]
 80021f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f8b7 	bl	800236c <SPI_EndRxTxTransaction>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e01d      	b.n	8002252 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002250:	2300      	movs	r3, #0
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	3728      	adds	r7, #40	@ 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800226c:	f7fe ff22 	bl	80010b4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4413      	add	r3, r2
 800227a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800227c:	f7fe ff1a 	bl	80010b4 <HAL_GetTick>
 8002280:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002282:	4b39      	ldr	r3, [pc, #228]	@ (8002368 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	015b      	lsls	r3, r3, #5
 8002288:	0d1b      	lsrs	r3, r3, #20
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002292:	e054      	b.n	800233e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d050      	beq.n	800233e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800229c:	f7fe ff0a 	bl	80010b4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d902      	bls.n	80022b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d13d      	bne.n	800232e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80022c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022ca:	d111      	bne.n	80022f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022d4:	d004      	beq.n	80022e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022de:	d107      	bne.n	80022f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022f8:	d10f      	bne.n	800231a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002318:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e017      	b.n	800235e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3b01      	subs	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	bf0c      	ite	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	2300      	movne	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	429a      	cmp	r2, r3
 800235a:	d19b      	bne.n	8002294 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000000 	.word	0x20000000

0800236c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2201      	movs	r2, #1
 8002380:	2102      	movs	r1, #2
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff ff6a 	bl	800225c <SPI_WaitFlagStateUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002392:	f043 0220 	orr.w	r2, r3, #32
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e013      	b.n	80023c6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2180      	movs	r1, #128	@ 0x80
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff ff57 	bl	800225c <SPI_WaitFlagStateUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e000      	b.n	80023c6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <memset>:
 80023ce:	4603      	mov	r3, r0
 80023d0:	4402      	add	r2, r0
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d100      	bne.n	80023d8 <memset+0xa>
 80023d6:	4770      	bx	lr
 80023d8:	f803 1b01 	strb.w	r1, [r3], #1
 80023dc:	e7f9      	b.n	80023d2 <memset+0x4>
	...

080023e0 <__libc_init_array>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	2600      	movs	r6, #0
 80023e4:	4d0c      	ldr	r5, [pc, #48]	@ (8002418 <__libc_init_array+0x38>)
 80023e6:	4c0d      	ldr	r4, [pc, #52]	@ (800241c <__libc_init_array+0x3c>)
 80023e8:	1b64      	subs	r4, r4, r5
 80023ea:	10a4      	asrs	r4, r4, #2
 80023ec:	42a6      	cmp	r6, r4
 80023ee:	d109      	bne.n	8002404 <__libc_init_array+0x24>
 80023f0:	f000 f81a 	bl	8002428 <_init>
 80023f4:	2600      	movs	r6, #0
 80023f6:	4d0a      	ldr	r5, [pc, #40]	@ (8002420 <__libc_init_array+0x40>)
 80023f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002424 <__libc_init_array+0x44>)
 80023fa:	1b64      	subs	r4, r4, r5
 80023fc:	10a4      	asrs	r4, r4, #2
 80023fe:	42a6      	cmp	r6, r4
 8002400:	d105      	bne.n	800240e <__libc_init_array+0x2e>
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	f855 3b04 	ldr.w	r3, [r5], #4
 8002408:	4798      	blx	r3
 800240a:	3601      	adds	r6, #1
 800240c:	e7ee      	b.n	80023ec <__libc_init_array+0xc>
 800240e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002412:	4798      	blx	r3
 8002414:	3601      	adds	r6, #1
 8002416:	e7f2      	b.n	80023fe <__libc_init_array+0x1e>
 8002418:	08002464 	.word	0x08002464
 800241c:	08002464 	.word	0x08002464
 8002420:	08002464 	.word	0x08002464
 8002424:	08002468 	.word	0x08002468

08002428 <_init>:
 8002428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242a:	bf00      	nop
 800242c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242e:	bc08      	pop	{r3}
 8002430:	469e      	mov	lr, r3
 8002432:	4770      	bx	lr

08002434 <_fini>:
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	bf00      	nop
 8002438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243a:	bc08      	pop	{r3}
 800243c:	469e      	mov	lr, r3
 800243e:	4770      	bx	lr
